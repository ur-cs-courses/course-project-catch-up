@startuml Class Diagram

'Manager uses Room
Manager --> Room
'Manager uses Robot
Manager --> Robot
'Manager uses Technician
Manager --> Technician
'Manager uses Fleet'
Manager --> Fleet


'Sweeper is a Robot
Robot <|-- Sweeper
'Mopper is a Robot
Robot <|-- Mopper
'Scrubber is a Robot
Robot <|-- Scrubber
'Technician uses Robot
Technician --> Robot
'Robot uses Room
Robot --> Room
'One Fleet contains many robots
Fleet "1" *-- "many" Robot


class Manager
Manager : void viewRobotStatus()
Manager : void viewLocation()
Manager : void assignRobot()
Manager : void callTech()
Manager : void displayDirtyRooms()
Manager : void displayCleanRooms()
Manager : void displayAllRooms()
Manager : void displayBusyRobots()
Manager : void displayAvailableRobots()
Manager : void displayFleet()

class Room{
string name
float width_
float length_
bool sweepable
bool moppable
bool scrubable
float percentSwept_
float percentMopped_
float percentScrubbed_

string getName()
float getWidth()
float getLength()
float getSize()
bool getSweepable()
bool getMoppable()
bool getScrubbable()
float getPercentSwept()
float getPercentMopped()
float getPercentScrubbed()
void setPercentSwept(float percent)
void setPercentMopped(float percent)
void setPercentScrubbed(float percent)
void randomlyDirty()
}

class Robot{
string name
float battery 
Size size
Room* location
bool busy
bool failed
static int numberOfRobots

string getName()
int getID()
float getBattery()
Size getSize()
Room* getLocation()
bool getBusy()
bool getFailed()
void move(Room* room)
void charge()
void setName(std::string name)
void setBattery(float percent)
void setBusy(bool status)
void setFailed(bool status)
bool hasFailed()
virtual bool isRoomClean()
}

class Fleet{
      vector <Robot*> fleet
      vector <Robot*> AvailableRobots
      vector <Robot*> BusyRobots

      void updateVectors(Robot* robot)
      vector<Robot*> getFleet()
      vector<Robot*> getAvailableRobots()
      vector<Robot*> getBusyRobots()

}

class Technician{
    std::deque<Robot*> brokenRobotQueue

    void technicianFixesRobot()
    void addRobotToQueue(Robot* robot)
    bool isTechBusy() const

}

class Sweeper{
    void Sweep()
    virtual bool isRoomClean()
}

class Scrubber{
    void Scrub()
    virtual bool isRoomClean()
}

class Mopper{
    void Mop()
    virtual bool isRoomClean()
}

@enduml